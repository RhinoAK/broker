# SparkSwap CircleCI Config
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
# If you are modifying this file, use this tool to validate: https://circleci.com/docs/2.0/local-cli/#validating-20-yaml-syntax
#
version: 2
jobs:
  build:
    docker:
      - image: node:8.11
    working_directory: ~/broker

    steps:
      - checkout

      # We need to update image packages for the time being or else the update
      # and installation of protoc will fail.
      #
      # This can be removed once 8.11-jessie has resolved the issue (or we move to another node version)
      - run: printf "deb http://archive.debian.org/debian/ jessie main\ndeb-src http://archive.debian.org/debian/ jessie main\ndeb http://security.debian.org jessie/updates main\ndeb-src http://security.debian.org jessie/updates main" > /etc/apt/sources.list

      # Install the protoc binary to allow us to test proto files in later steps
      - run: apt-get update && apt-get install unzip
      - run: curl -L https://github.com/protocolbuffers/protobuf/releases/download/v3.7.1/protoc-3.7.1-linux-x86_64.zip >> ./protoc.zip
      - run: rm -rf ./protoc && mkdir -p ./protoc && ls -la ./ && unzip ./protoc.zip -d ./protoc
      - run: cp -vr ./protoc/include /usr/local/include/
      - run: echo 'export PATH=./protoc/bin:$PATH' >> $BASH_ENV

      # Make sure we are on atleast v6 npm
      - run: npm i -g npm@6

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v3-dependencies-{{ checksum "package.json" }}

      - run: npm install

      - save_cache:
          paths:
            - node_modules
          key: v3-dependencies-{{ checksum "package.json" }}

      # This checks if the broker proto files are valid through protobufjs during our CI run
      - run: npm run broker-proto

      # This checks if our proto files are valid for other languages
      - run: npm run validate-proto

      - run: npm run ci-test
  integration-tests:
    docker:
      - image: docker:18.09.7
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - run: |
          apk add --update \
            py-pip python-dev libffi-dev openssl-dev gcc libc-dev make git curl bash nodejs nodejs-npm
      - run: pip install docker-compose
      - run: |
          mkdir -p ~/sparkswap/lnd-engine
          git clone https://github.com/sparkswap/lnd-engine.git ~/sparkswap/lnd-engine
          bash -c "(cd ~/sparkswap/lnd-engine && npm run build)"
      # Set up docker-compose on this image to make sure we are not going crazy
  publish-cli:
    docker:
      - image: node:8.11
    working_directory: ~/broker
    steps:
      - checkout

      # Make sure we are on atleast v6 npm
      - run: npm i -g npm@6

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v3-dependencies-{{ checksum "package.json" }}

      - run: npm install

      - save_cache:
          paths:
            - node_modules
          key: v3-dependencies-{{ checksum "package.json" }}

      - run: npm run dist-cli

# for info on workflows, see: https://circleci.com/docs/2.0/workflows/
workflows:
  version: 2
  build-and-test:
    jobs:
      - integration-tests
  master-publish-cli:
    jobs:
      - publish-cli:
          filters:
            branches:
              only: master
